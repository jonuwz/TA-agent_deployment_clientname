#!/usr/bin/env python3
import json
import sys
import os
import socket
import select
import requests
import re

DEFAULT_DC_PROVIDER = 'myco'

try:
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
except:
    pass

def getToken():
    # wait at most 1s for authtoken to be passed on stdin
    authToken=""
    i, o, e = select.select( [sys.stdin], [], [], 1)
    if (i):
        authToken = sys.stdin.readline().strip()
    else:
        print("ERR No stdin")
        return None
    if len(authToken) < 10:
        print("ERR bad token")
        return None
    else:
        return authToken

def azureTags():
    try:
        res = requests.get('http://169.254.169.254/metadata/instance/compute?api-version=2021-02-01',headers={'Metadata': "true"}, timeout=5)
        content=json.loads(res.content)
    except:
        e = sys.exc_info()[0]
        print(e)
        return None

    tags = {}
    for obj in content['tagsList']:
        tags[obj['name']] = obj['value']

    tags['name'] = content.get('name','unknown')
    tags['location'] = 'cloud'
    tags['provider'] = 'azure'
    return tags

def gcpTags():
    try:
        res = requests.get('http://metadata.google.internal/computeMetadata/v1/?recursive=true',headers={'Metadata-Flavor': 'Google'}, timeout=5    )
        content=json.loads(res.content)
    except:
        e = sys.exc_info()[0]
        print(e)
        return None

    tags = content.get('project').get('attributes',{})
    itags = content.get('instance').get('attributes',{})
    itags.pop('project',None)

    tags.update(itags)

    tags['name'] = content.get('instance',{}).get('name','unknown')
    tags['location'] = 'cloud'
    tags['provider'] = 'gcp'

    return tags

def localTags():

    tags = {}
    path = '/etc/identity'
    if not os.path.isfile(path) or not os.access(path, os.R_OK):
        print("localtest fail")
        return None

    with open(path) as myfile:
      for line in myfile:

        key, val = line.strip().partition("=")[::2]
        tags[key.strip()] = str(val)

    tags['name'] = socket.gethostname().split('.', 1)[0]
    if 'location' not in tags:
        tags['location'] = 'dc'
    if 'provider' not in tags:
        tags['provider'] = DEFAULT_DC_PROVIDER

    return tags

def clientName(authToken):
    clientName = ""
    try:
        res = requests.get('https://localhost:8089/servicesNS/-/-/deployment/client/config?output_mode=json',headers={'Authorization':  "Splunk %s" % (authToken)}, verify=False, timeout=5)
        body=json.loads(res.content)
        entries=body.get('entry',[])
        if len(entries) == 1:
            clientName=entries[0].get('content',{}).get('clientName',"")
    except:
        print("Failed to get clientName")
        return None
    return clientName

def setClientName(authToken,name):
    data = "clientName=%s" % (name)
    clientName = ""
    try:
        res = requests.post('https://localhost:8089/servicesNS/-/-/deployment/client/config?output_mode=json',data=data,headers={'Authorization':  "Splunk %s" % (authToken)}, verify=False, timeout=5)
        body=json.loads(res.content)
        entries=body.get('entry',[])
        if len(entries) == 1:
            clientName=entries[0].get('content',{}).get('clientName',"")
    except:
        print("Failed to set clientName")
        return None
    return clientName

def clientNameFromTags(t):

    pattern = re.compile('[\W_]+')

    cleanTags=[]
    for key in ["location","provider","project","family","app","service","name"]:
        val = t.get(key,'unknown')
        val = pattern.sub('',val)
        cleanTags.append(val.lower())

    return "%s.%s.%s.%s.%s.%s.%s" % tuple(cleanTags)

if __name__ == "__main__":
    authToken = getToken()
    if authToken is None:
        print("ERR No token")
        sys.exit(1)

    print("Attempting to get localTags")
    tags = localTags()
    if tags is not None and 'project' not in tags:
        print("localTags does not have project")
        sys.exit(1)

    if tags is None:
        print("Attempting to get azureTags")
        tags = azureTags()

    if tags is None:
        print("Attempting to get gcpTags")
        tags = gcpTags()

    if tags is None:
        print("Unable to get tags by any method")
        sys.exit(1)

    desiredName = clientNameFromTags(tags)
    actualName  = clientName(authToken)

    if actualName is not None and desiredName != actualName:
        setClientName(authToken,desiredName)

# vi:et:sts=4:sw=4
